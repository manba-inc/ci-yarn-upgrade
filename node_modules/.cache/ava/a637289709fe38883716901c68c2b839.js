"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareVariable\":[\"id\"],\"ExistentialTypeParam\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumericLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\"],\"ObjectTypeProperty\":[\"key\",\"value\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"UnionTypeAnnotation\":[\"types\"],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"ForAwaitStatement\":[\"left\",\"right\",\"body\"],\"BindExpression\":[\"object\",\"callee\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"RestProperty\":[\"argument\"],\"SpreadProperty\":[\"argument\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require("ava");

var _ava2 = _interopRequireDefault(_ava);

var _upgradeRequest = require("../src/upgrade-request");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _test__ = _slicedToArray(_upgradeRequest.__test__, 4);

const findOutdatedDeps = _test__[0],
      findExistingBranch = _test__[1],
      selectPushPromise = _test__[2],
      selectDeletePromise = _test__[3];


let LOG = () => {};

(0, _ava2.default)("findOutdatedDeps#noOutdated", t => {
    t.plan(1);
    let p = findOutdatedDeps(LOG, "");
    return p.catch(err => {
        t.is(err, "dependencies are not up to date.");
    });
});

(0, _ava2.default)("findOutdatedDeps#worksNormally", t => {
    var _rec = new _powerAssertRecorder();

    let json = {
        "type": "table", "data": {
            "head": ["Package", "Current", "Wanted", "Latest"],
            "body": [["classnames", "2.2.0", "2.2.0", "2.2.5"], ["react", "15.0.0", "15.3.2", "15.3.2"], ["react-dom", "15.0.0", "15.3.2", "15.3.2"]]
        }
    };

    var _findOutdatedDeps = findOutdatedDeps(LOG, JSON.stringify(json)),
        _findOutdatedDeps2 = _slicedToArray(_findOutdatedDeps, 2);

    let diff = _findOutdatedDeps2[0],
        hex = _findOutdatedDeps2[1];

    t.deepEqual(diff, json.data.body);
    t.true(_rec._expr(_rec._capt(_rec._capt(hex, "arguments/0/left") === "f629b46a0b81cad0eb4b418daf62a1850b96755c", "arguments/0"), {
        content: "t.true(hex === \"f629b46a0b81cad0eb4b418daf62a1850b96755c\")",
        filepath: "test/upgrade-request.test.js",
        line: 30,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"hex\",\"range\":[7,10]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"f629b46a0b81cad0eb4b418daf62a1850b96755c\",\"range\":[15,57]},\"range\":[7,57]}],\"range\":[0,58]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"hex\",\"range\":[7,10]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[11,14]},{\"type\":{\"label\":\"string\"},\"value\":\"f629b46a0b81cad0eb4b418daf62a1850b96755c\",\"range\":[15,57]},{\"type\":{\"label\":\")\"},\"range\":[57,58]}]",
        visitorKeys: _powerAssertVisitorKeys
    }));
});

(0, _ava2.default)("findOutdatedDeps#latestOnly", t => {
    let json = {
        "type": "table", "data": {
            "head": ["Package", "Current", "Wanted", "Latest"],
            "body": [["classnames", "2.2.0", "2.2.0", "2.2.5"], ["react", "15.0.0", "15.0.0", "15.3.2"], ["react-dom", "15.0.0", "15.0.0", "15.3.2"]]
        }
    };
    t.plan(1);
    return findOutdatedDeps(LOG, JSON.stringify(json)).catch(m => t.pass(m));
});

(0, _ava2.default)("findExistingBranch#worksNormally", t => {
    let options = {
        prefix: "hogehoge/",
        now: "112233"
    };
    let names = [];
    let d = { b: "c" };
    let hex = "azazazaz";

    var _findExistingBranch = findExistingBranch(LOG, options, names, d, hex),
        _findExistingBranch2 = _slicedToArray(_findExistingBranch, 2);

    let newBranch = _findExistingBranch2[0],
        diff = _findExistingBranch2[1];

    t.is(newBranch, `${options.prefix}${options.now}/${hex}`);
    t.is(diff, d);
});

(0, _ava2.default)("findExistingBranch#foundExistingBranch", t => {
    let options = {
        prefix: "hogehoge/",
        now: "112233"
    };
    let hex = "azazazaz";
    let names = ["3322", `hoge/22/${hex}`, "dddd"];
    let d = { b: "c" };
    t.plan(1);
    return findExistingBranch(LOG, options, names, d, hex).catch(m => t.pass(m));
});

(0, _ava2.default)("selectPushPromise#worksNormally", t => {
    let options = {
        execute: true
    };
    let r = "origin";
    let b = "mybranch";
    t.plan(1);
    return selectPushPromise(LOG, options, {
        push: (remote, branch) => {
            t.deepEqual([remote, branch], [r, b]);
        }
    }, r, b);
});

(0, _ava2.default)("selectPushPromise#emptyPromise", t => {
    let options = {
        execute: false
    };
    t.plan(1);
    return selectPushPromise(LOG, options, {}, {}).then(() => t.pass());
});

(0, _ava2.default)("selectDeletePromise#worksNormally", t => {
    let options = {
        keep: false
    };
    let branch = "mybranch";
    let report = "myReport";
    t.plan(2);
    return selectDeletePromise(LOG, options, {
        deleteBranch: b => {
            t.is(b, branch);
            return {
                then: fn => {
                    t.is(fn(), report);
                }
            };
        }
    }, branch, report);
});

(0, _ava2.default)("selectDeletePromise#emptyPromise", t => {
    let options = {
        keep: true
    };
    let report = "myReport";
    t.plan(1);
    return selectDeletePromise(LOG, options, {}, "", report).then(r => t.is(r, report));
});
//# sourceMappingURL=../node_modules/.cache/ava/a637289709fe38883716901c68c2b839.js.map