{"version":3,"sources":["upgrade-request.test.js"],"names":["findOutdatedDeps","findExistingBranch","selectPushPromise","selectDeletePromise","LOG","t","plan","p","catch","err","is","json","JSON","stringify","diff","hex","deepEqual","data","body","true","m","pass","options","prefix","now","names","d","b","newBranch","execute","r","push","remote","branch","then","keep","report","deleteBranch","fn"],"mappings":"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","file":"upgrade-request.test.js","sourcesContent":["import test from \"ava\";\n\nimport { __test__ } from \"../src/upgrade-request\";\n\nconst [findOutdatedDeps, findExistingBranch, selectPushPromise, selectDeletePromise] = __test__;\n\nlet LOG = () => { };\n\ntest(\"findOutdatedDeps#noOutdated\", t => {\n    t.plan(1);\n    let p = findOutdatedDeps(LOG, \"\");\n    return p.catch(err => {\n        t.is(err, \"dependencies are not up to date.\");\n    });\n});\n\ntest(\"findOutdatedDeps#worksNormally\", t => {\n    let json = {\n        \"type\": \"table\", \"data\":\n        {\n            \"head\": [\"Package\", \"Current\", \"Wanted\", \"Latest\"],\n            \"body\": [\n                [\"classnames\", \"2.2.0\", \"2.2.0\", \"2.2.5\"],\n                [\"react\", \"15.0.0\", \"15.3.2\", \"15.3.2\"],\n                [\"react-dom\", \"15.0.0\", \"15.3.2\", \"15.3.2\"]]\n        }\n    };\n    let [diff, hex] = findOutdatedDeps(LOG, JSON.stringify(json));\n    t.deepEqual(diff, json.data.body);\n    t.true(hex === \"f629b46a0b81cad0eb4b418daf62a1850b96755c\");\n});\n\ntest(\"findOutdatedDeps#latestOnly\", t => {\n    let json = {\n        \"type\": \"table\", \"data\":\n        {\n            \"head\": [\"Package\", \"Current\", \"Wanted\", \"Latest\"],\n            \"body\": [\n                [\"classnames\", \"2.2.0\", \"2.2.0\", \"2.2.5\"],\n                [\"react\", \"15.0.0\", \"15.0.0\", \"15.3.2\"],\n                [\"react-dom\", \"15.0.0\", \"15.0.0\", \"15.3.2\"]]\n        }\n    };\n    t.plan(1);\n    return findOutdatedDeps(LOG, JSON.stringify(json))\n        .catch(m => t.pass(m));\n});\n\ntest(\"findExistingBranch#worksNormally\", t => {\n    let options = {\n        prefix: \"hogehoge/\",\n        now: \"112233\"\n    };\n    let names = [];\n    let d = { b: \"c\" };\n    let hex = \"azazazaz\";\n    let [newBranch, diff] = findExistingBranch(LOG, options, names, d, hex);\n    t.is(newBranch, `${options.prefix}${options.now}/${hex}`);\n    t.is(diff, d);\n});\n\ntest(\"findExistingBranch#foundExistingBranch\", t => {\n    let options = {\n        prefix: \"hogehoge/\",\n        now: \"112233\"\n    };\n    let hex = \"azazazaz\";\n    let names = [\"3322\", `hoge/22/${hex}`, \"dddd\"];\n    let d = { b: \"c\" };\n    t.plan(1);\n    return findExistingBranch(LOG, options, names, d, hex)\n        .catch(m => t.pass(m));\n});\n\ntest(\"selectPushPromise#worksNormally\", t => {\n    let options = {\n        execute: true\n    };\n    let r = \"origin\";\n    let b = \"mybranch\";\n    t.plan(1);\n    return selectPushPromise(LOG, options, {\n        push: (remote, branch) => {\n            t.deepEqual([remote, branch], [r, b]);\n        }\n    }, r, b);\n});\n\ntest(\"selectPushPromise#emptyPromise\", t => {\n    let options = {\n        execute: false\n    };\n    t.plan(1);\n    return selectPushPromise(LOG, options, {}, {}).then(() => t.pass());\n});\n\ntest(\"selectDeletePromise#worksNormally\", t => {\n    let options = {\n        keep: false\n    };\n    let branch = \"mybranch\";\n    let report = \"myReport\";\n    t.plan(2);\n    return selectDeletePromise(LOG, options, {\n        deleteBranch: b => {\n            t.is(b, branch);\n            return {\n                then: (fn) => {\n                    t.is(fn(), report);\n                }\n            };\n        }\n    }, branch, report);\n});\n\ntest(\"selectDeletePromise#emptyPromise\", t => {\n    let options = {\n        keep: true\n    };\n    let report = \"myReport\";\n    t.plan(1);\n    return selectDeletePromise(LOG, options, {}, \"\", report).then(r => t.is(r, report));\n});\n"]}